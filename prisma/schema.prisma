// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // uses connection pooling
}

model User {
  id         Int         @id @default(autoincrement())
  email      String      @unique
  password   String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  UserDetail UserDetail?
  groups     Group[]     @relation("UserGroups")
  articles   Article[]

  @@map("users")
}

model UserDetail {
  id               Int       @id @default(autoincrement())
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @default(now())
  fullName         String?   @map("full_name")
  shortName        String?   @map("short_name")
  phoneNumber      String?   @map("phone_number")
  age              Int?
  user             User?     @relation(fields: [userId], references: [id])
  userId           Int       @unique @map("user_id")
  Message          Message[]
  profileImageName String?   @map("profile_image_name")

  @@map("user_details")
}

model Article {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
  title          String   @map("title")
  content        String
  thumbnailImage String?  @map("thumbnail_image")
  authorId       Int      @map("author_id")
  user           User     @relation(fields: [authorId], references: [id])
  categoryId     Int      @map("category_id")
  category       Category @relation(fields: [categoryId], references: [id])
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique @map("category_name")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  Article   Article[]
}

model Group {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  name      String
  messages  Message[]
  users     User[]    @relation("UserGroups")
}

model Message {
  id         Int         @id @default(autoincrement())
  content    String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @default(now())
  userDetail UserDetail? @relation(fields: [userId], references: [id])
  group      Group?      @relation(fields: [groupId], references: [id])
  userId     Int
  groupId    Int
}

model File {
  filename  String   @unique
  data      Bytes
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}
